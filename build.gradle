plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version "4.0.0"
}

group = 'br.com.coffeeandit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', '2021.0.3')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //testes
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'org.assertj:assertj-core'
}

testSets {
    e2eTest { dirName = 'test-e2e'}
    integrationTest { dirName = 'test-integration'}
}

task allTests() {
    dependsOn('test')
    allTests.finalizedBy('integrationTestEe2e')
}

task integrationTestEe2e() {
    dependsOn('integrationTest')
    integrationTest.finalizedBy('e2eTest')
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "user.language", "en"
    systemProperty "user.country", "US"
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn(test, integrationTest, e2eTest)
    getExecutionData()
        .setFrom(fileTree(buildDir)
                .include("/jacoco/test.exec")
                .include("/jacoco/integrationTest.exec")
                .include("/jacoco/e2eTest.exec"))

    reports {
        xml.enabled true
        html.enabled true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

//    afterEvaluate {
//        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(it, [])
//        }))
//    }
}

check {
    dependsOn jacocoTestCoverageVerification
}
